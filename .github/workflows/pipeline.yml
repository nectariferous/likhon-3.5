name: Likhon 3.5 AI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1'  # Run every Monday at 2:00 AM

env:
  PYTHON_VERSION: '3.8'

jobs:
  validate_environment:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Validate Python environment
      run: |
        python --version
        pip --version

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Verify required files
      run: |
        for file in LICENSE README.md convert_to_gguf.py evaluate.py fine_tune.py likhon35_local.py model.py requirements.txt train.py usage_example.py; do
          if [ ! -f "$file" ]; then
            echo "Error: $file is missing"
            exit 1
          fi
        done

  test_and_evaluate:
    needs: validate_environment
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      run: |
        # Add your test command here, for example:
        # python -m unittest discover tests
        echo "Running tests..."

    - name: Evaluate model
      env:
        TOKENS: ${{ secrets.TOKENS }}
      run: |
        python evaluate.py
      continue-on-error: true

    - name: Upload evaluation results
      uses: actions/upload-artifact@v2
      with:
        name: evaluation-results
        path: evaluation_results.json
      if: always()

  fine_tune:
    needs: test_and_evaluate
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Fine-tune model
      env:
        TOKENS: ${{ secrets.TOKENS }}
      run: |
        python fine_tune.py
      continue-on-error: true

    - name: Upload fine-tuned model
      uses: actions/upload-artifact@v2
      with:
        name: fine-tuned-model
        path: fine_tuned_model/
      if: success()

  convert_model:
    needs: fine_tune
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Download fine-tuned model
      uses: actions/download-artifact@v2
      with:
        name: fine-tuned-model
        path: fine_tuned_model/

    - name: Convert model to GGUF
      run: |
        python convert_to_gguf.py
      continue-on-error: true

    - name: Upload converted model
      uses: actions/upload-artifact@v2
      with:
        name: gguf-model
        path: gguf_model/
      if: success()

  create_release:
    needs: [test_and_evaluate, fine_tune, convert_model]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Download artifacts
      uses: actions/download-artifact@v2

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release ${{ github.run_number }}
        body: |
          Automated release for Likhon 3.5
          
          Evaluation Results: See evaluation-results/evaluation_results.json
          Fine-tuned Model: See fine-tuned-model/
          GGUF Model: See gguf-model/
        draft: false
        prerelease: false

  cleanup:
    needs: create_release
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Remove old artifacts
      uses: c-hive/gha-remove-artifacts@v1
      with:
        age: '1 week'
        skip-recent: 5
